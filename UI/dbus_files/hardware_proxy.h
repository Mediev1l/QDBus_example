/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p hardware_proxy ../../Interfaces/com.scythestudio.hardware.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef HARDWARE_PROXY_H
#define HARDWARE_PROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.scythestudio.hardware
 */
class ComScythestudioHardwareInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.scythestudio.hardware"; }

public:
    ComScythestudioHardwareInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~ComScythestudioHardwareInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> ping(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("ping"), argumentList);
    }

    inline QDBusPendingReply<int> ramUsage()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ramUsage"), argumentList);
    }

    inline QDBusPendingReply<QString> status()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("status"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace scythestudio {
    typedef ::ComScythestudioHardwareInterface hardware;
  }
}
#endif
